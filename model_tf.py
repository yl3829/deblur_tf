import tensorflow as tf
import numpy as np

class deblur_model():
    def __init__(self, 
                 d_param,
                 g_param,
                 ):
        # input:
        #   d_param(dict): parameters need for discriminator 
        #   g_param(dict): parameters need for generator
        self.d_param = d_param
        self.h_param = g_param
        self.generator_model()
        self.discriminator_model()
        self.init_loss()
    
    def generator_model(self):
        # built the generator model 
        # output
        #    self.fake_B
        self.real_A = # a place for the input of blury image
        # implementations
        # ...
        
        self.fake_B = # a tensor for the output of the generator_model
        pass
    
    def discriminator_model(self):
        # take input from self.fake_B and self.real_B
        # output the result of discrrminator
        self.real_B = # a placeholder for the real sharp image
        
        self.real_C = 
        self.fake_C = 
        pass
    
    def wgangp_loss(self):
        # input:
        #    fake_C: a tensor generated by d model used generated images
        #    real_C: a tensor generated by d model used real sharp images
        # return:
        #    d_loss: loss for discriminator
        #    g_gan_loss: loss for generator
        pass
    
    def preceptual_loss(self):
        # input:
        #    fake_B: a tensor generated by generator_model
        #    real_B: a place holder for the real sharp image 
        # return:
        #    p_loss: the preceptual loss for generator
        pass
    
    def init_loss(self):
        # combine the loss of g model and d model
        # and apply them to two different optimizer.
        pass
    
    def train(self):
        # implement training on two models
        pass
    
    def generate(self):
        # generate deblured image
        pass
    
    